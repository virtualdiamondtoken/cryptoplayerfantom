{"version":3,"sources":["Web3Util.js","pages/HomePage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["getInstancePlayer","web3","a","eth","getAccounts","window","user","instacePlayer","Contract","CryptoPlayerABI","from","HomePage","props","componentDidMount","Promise","resolve","reject","ethereum","Web3","enable","console","log","process","provider","providers","HttpProvider","contractInstancePlayer","setState","loadData","isLoadingHomepageData","interval","setInterval","fetchBlockchainData","state","hasHomepageData","lastRequestedAddress","requestedPrice","requestedTime","requestURL","songCounter","requestSong","bind","this","clearInterval","methods","_price","call","_requestedTime","_songCounter","_requestedAddress","requestedAddress","_requestedUrl","requestedUrl","replace","send","value","date","seconds","Math","floor","Date","Container","style","textAlign","Grid","container","spacing","item","xs","md","alignItems","display","justifyContent","width","allow","height","src","title","frameborder","timeSince","utils","fromWei","undefined","padding","Input","onChange","e","target","placeholder","Button","onClick","event","React","Component","Routes","exact","path","component","render","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d04302bf.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport CryptoPlayerABI from './abi/player.json'\r\n// testnet \r\n// const cryptoPlayerAddress = \"0xa28Bd04089f455d7F0026117F7245cc107fA6Cbb\"\r\n// const blockchainName = \"AVAX\"\r\n// mainnet \r\n// avax\r\n// const cryptoPlayerAddress = \"0xf0F375fA82bF90331cEb837d2dFC2ba7d1cA0563\"\r\n// fantom\r\nconst blockchainName = \"FTM\"\r\nconst cryptoPlayerAddress = \"0xC26155619c24841688bb5F3579b1C993Eeb35d9B\"\r\n\r\n// bsc\r\n// const cryptoPlayerAddress = \"0x69Be6ca6B0E2EEa9e6AD25F76C1FB70A39b7554d\"\r\n// const blockchainName = \"BNB\"\r\n\r\n// one \r\n// const cryptoPlayerAddress = \"0xf0F375fA82bF90331cEb837d2dFC2ba7d1cA0563\"\r\n\r\n// matic \r\n// const cryptoPlayerAddress = \"0xf0F375fA82bF90331cEb837d2dFC2ba7d1cA0563\"\r\n\r\n\r\nexport const getWeb3 = () =>\r\n    new Promise(async(resolve, reject) => {\r\n    if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n        await window.ethereum.enable();\r\n        resolve(web3);\r\n        } catch (error) {\r\n        reject(error);\r\n        }\r\n    } else if (window.web3) {\r\n        // load metamask provider\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n    } else {\r\n        console.log(process.env.PUBLIC_URL)\r\n        // main net\r\n        // const provider = new Web3.providers.HttpProvider(\"https://api.avax.network/ext/bc/C/rpc\");\r\n        // const provider = new Web3.providers.HttpProvider(\"https://bsc-dataseed.binance.org\");\r\n        const provider = new Web3.providers.HttpProvider(\"https://rpcapi.fantom.network\");\r\n\r\n        \r\n        // test net \r\n        // const provider = new Web3.providers.HttpProvider(\"https://api.avax-test.network/ext/bc/C/rpc\");\r\n\r\n\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n    }\r\n});\r\nexport const getInstancePlayer = async (web3) => {\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    \r\n    window.instacePlayer= new web3.eth.Contract(\r\n        CryptoPlayerABI,\r\n        cryptoPlayerAddress,\r\n        {\r\n            from: window.user\r\n        }\r\n    );\r\n    return window.instacePlayer;\r\n}\r\n\r\nexport default function  blockhain(){return  blockchainName}\r\n\r\n","import React from \"react\";\r\nimport {getInstancePlayer, getWeb3}  from \"../Web3Util\";\r\nimport blockchain from \"../Web3Util\";\r\nimport Web3 from 'web3';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass HomePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasHomepageData: false,\r\n      isLoadingHomepageData:true,\r\n      lastRequestedAddress:\"\",\r\n      requestedPrice:0,\r\n      requestedTime:0,\r\n      requestURL:\"\",\r\n      songCounter:0,\r\n      requestedTime:0,\r\n      requestedAddress:\"\",\r\n      requestedUrl:\"\"\r\n    };\r\n    this.requestSong = this.requestSong.bind(this)\r\n    this.fetchBlockchainData = this.fetchBlockchainData.bind(this)\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try{\r\n      const web3 = await getWeb3();\r\n      window.web3 = web3;\r\n      const contractInstancePlayer = await getInstancePlayer(window.web3);\r\n\r\n      this.setState({ user: window.user });\r\n      this.setState({ contractInstancePlayer});\r\n      await this.loadData();\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    }finally{\r\n      this.setState({\r\n        isLoadingHomepageData:false\r\n      })\r\n    }\r\n    this.interval = setInterval(() =>  this.fetchBlockchainData(), 1000);\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n  async fetchBlockchainData() {\r\n    console.log(\"aqui\")\r\n\r\n    try {\r\n      let requestedPrice = await this.state.contractInstancePlayer.methods._price().call()\r\n        let requestedTime = await this.state.contractInstancePlayer.methods._requestedTime().call()\r\n        let songCounter = await this.state.contractInstancePlayer.methods._songCounter().call()\r\n        let requestedAddress = await this.state.contractInstancePlayer.methods._requestedAddress().call()\r\n        let requestedUrl = await this.state.contractInstancePlayer.methods._requestedUrl().call()\r\n        requestedUrl = requestedUrl.replace(\"watch?v=\",\"/embed/\")\r\n        if(songCounter != this.state.songCounter){\r\n          this.setState({requestedPrice,requestedTime,songCounter,requestedAddress,requestedUrl})\r\n        }else{\r\n          this.setState({requestedTime})\r\n        }\r\n    } catch (e) {\r\n\r\n      console.log('Error', e)\r\n\r\n    }\r\n  }\r\n  async loadData() {\r\n      try {\r\n        let requestedPrice = await this.state.contractInstancePlayer.methods._price().call()\r\n        let requestedTime = await this.state.contractInstancePlayer.methods._requestedTime().call()\r\n        let songCounter = await this.state.contractInstancePlayer.methods._songCounter().call()\r\n        let requestedAddress = await this.state.contractInstancePlayer.methods._requestedAddress().call()\r\n        let requestedUrl = await this.state.contractInstancePlayer.methods._requestedUrl().call()\r\n        requestedUrl = requestedUrl.replace(\"watch?v=\",\"/embed/\")\r\n        \r\n        this.setState({hasHomepageData:true,requestedPrice,requestedTime,songCounter,requestedAddress,requestedUrl})\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    }\r\n  }\r\n\r\n  async requestSong(){\r\n    try {\r\n      this.state.contractInstancePlayer.methods.requestSong(window.user,this.state.requestURL).send({\r\n        value:this.state.requestedPrice\r\n      })\r\n      await this.loadData()\r\n    } catch (e) {\r\n      console.log('Error', e)\r\n    } \r\n  }\r\n\r\n   timeSince(date) {\r\n\r\n    var seconds = Math.floor((new Date() - date*1000) / 1000);\r\n  \r\n    var interval = seconds / 31536000;\r\n  \r\n    if (interval > 1) {\r\n      return Math.floor(interval) + \" years\";\r\n    }\r\n    interval = seconds / 2592000;\r\n    if (interval > 1) {\r\n      return Math.floor(interval) + \" months\";\r\n    }\r\n    interval = seconds / 86400;\r\n    if (interval > 1) {\r\n      return Math.floor(interval) + \" days\";\r\n    }\r\n    interval = seconds / 3600;\r\n    if (interval > 1) {\r\n      return Math.floor(interval) + \" hours\";\r\n    }\r\n    interval = seconds / 60;\r\n    if (interval > 1) {\r\n      return Math.floor(interval) + \" minutes\";\r\n    }\r\n    return Math.floor(seconds) + \" seconds\";\r\n  }\r\n  render() {\r\n    return(\r\n          <Container  style={{textAlign:\"center\"}}>\r\n            <h1>Crypto Youtube Player</h1>\r\n\r\n            <br />\r\n\r\n            <Grid container spacing={2} >\r\n              <Grid item xs={6} md={6} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                <div>\r\n                  <div style={{textAlign:\"center\"}}>\r\n                    <br />\r\n                    {\r\n                    this.state.isLoadingHomepageData\r\n                    ? null\r\n\r\n                    :\r\n                    <iframe width=\"560\" allow='autoplay' height=\"315\" src={this.state.requestedUrl+\"?autoplay=1&loop=1\"} title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>                  \r\n\r\n                    }\r\n                    </div>\r\n                </div>\r\n              </Grid>\r\n              <Grid item xs={6} md={6} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                <div>\r\n                  <div style={{textAlign:\"center\"}}>\r\n                    <br />\r\n                    Song counter: {this.state.songCounter} songs<br />\r\n                    Last requested address: {this.state.requestedAddress}<br />\r\n                    Last song requested since: {this.timeSince(this.state.requestedTime)} ago<br />\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n            <p style={{textAlign:\"center\",width:\"100%\"}}>Pay {Web3.utils.fromWei(this.state.requestedPrice+\"\")}  {blockchain()} to play your song. Every time a new song plays, {Web3.utils.fromWei(this.state.requestedPrice+\"\")/2}  {blockchain()} goes to the last person that requested a song.</p>\r\n              \r\n              {window.user != undefined?\r\n              <>\r\n                <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\", padding:0}}>\r\n                  <div>\r\n                    <Input onChange={e => this.setState({ requestURL: e.target.value })} value={this.state.requestURL} style={{width:\"100%\"}} placeholder=\"Enter youtube url: (example https://www.youtube.com/watch?v=sadJYWbffdGTe)\" />\r\n                    <Button onClick={(event)=>{this.requestSong(event)}} >Confirm song request for {Web3.utils.fromWei(this.state.requestedPrice+\"\")}  ${blockchain()}</Button> \r\n                  </div>\r\n                </Grid>\r\n              </>\r\n            :\r\n            <Grid item xs={12} md={12} style={{alignItems:\"center\",display:\"flex\",justifyContent:\"center\"}}>\r\n                \r\n                <b>Connect your wallet to the website to submit your song for {Web3.utils.fromWei(this.state.requestedPrice+\"\")} ${blockchain()}</b>\r\n\r\n            </Grid>\r\n            }\r\n            <br />\r\n            <br />\r\n\r\n         \r\n            </Grid>\r\n            \r\n          </Container>\r\n       \r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport {Route, Switch ,HashRouter} from \"react-router-dom\";\r\n\r\nimport HomePage from './pages/HomePage';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route exact path=\"/home\" component={HomePage} />\r\n\r\n      <Route\r\n        render={function() {\r\n          return <h1>Not Found</h1>;\r\n        }}\r\n      />\r\n    </Switch>\r\n    </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"../node_modules/react\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter as Router } from \"../node_modules/react-router-dom\";\r\nimport Routes from \"./Routes\";\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}